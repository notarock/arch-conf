; -*- mode: lisp; -*-

;; Copyright © 2018, 2018 Roch D'amour

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; Thansk to everyone who made their stumpwm config public.
;; Without you, this wouldn't be a thing :)

;;; Code:


;;; Mouse focus policy
(setf *mouse-focus-policy* :sloppy)

;;;; change the prefix key to something else
(set-prefix-key (kbd "s-c"))

;;;; Default terminal emulator
(setq *terminal* "termite")

(defcommand mailspring () ()
  "Run-or-Raise Mailspring"
  (run-or-raise "mailspring" '(:class "Mailspring")))

(defcommand firefox () ()
  "Run-or-Raise Firefox"
  (run-or-raise "firefox" '(:class "Firefox")))

(defcommand emacs () ()
  "Run-or-Raise Emacs"
  (run-or-raise "emacs " '(:class "Emacs")))


(define-frame-preference "MAIL"
  ;; frame raise lock (lock AND raise == jumpto)
  (0 t   t :class "Mailspring"))

(define-frame-preference "EMACS"
  ;; frame raise lock (lock AND raise == jumpto)
  (0 t   t :class "Emacs"))


(define-key *root-map* (kbd "f")            "firefox")
(define-key *root-map* (kbd "C-f")            "firefox")
(define-key *root-map* (kbd "t")            "mailspring")
(define-key *root-map* (kbd "C-t")            "mailspring")


;; Frames
(loop for (vi-key name) in '(("k" "up")
                             ("j" "down")
                             ("h" "left")
                             ("l" "right"))
   do (let ((key-combo (format nil "s-~A" vi-key))
            (shifted-key-combo (format nil "s-~A" (string-upcase vi-key))))
        (define-key *top-map* (kbd key-combo)
          (format nil "move-focus ~A" name))
        (define-key *top-map* (kbd shifted-key-combo)
          (format nil "move-window ~A" name))))


;;;; Default Browser
(setq *browser* "firefox")

(Setf *startup-message*
      "Get shit done.")

(setf *colors* (list "#383838"      ; 0 black
                     "#ab4642"      ; 1 Red
                     "#a1b56c"      ; 2 Green
                     "#f7ca88"      ; 3 Yellow
                     "#7cafc2"      ; 4 Blue
                     "#ba8baf"      ; 5 Magenta
                     "#86c1b9"      ; 6 Cyan
                     "#f8f8f8"      ; 7 White
                     "#585858"      ; 8 Gray
                     "#181818"))    ; 9 bg

;; (setf
;;  *mode-line-background-color* (nth 9 *colors*))


(set-fg-color         (nth 7 *colors*))
(set-bg-color         (nth 9 *colors*))
(set-border-color     (nth 6 *colors*))
(set-focus-color      (nth 1 *colors* ))
(set-unfocus-color    (nth 9 *colors* ))


(setf
 *maxsize-border-width*           4
 *normal-border-width*            4
 *window-border-style*            :thin
 *transient-border-width*         4
 )

(setf
 *message-window-gravity*         :center
 *timeout-wait*                   10
 *input-window-gravity*           :center
 )


;;;; top-map splits
(define-key *top-map* (kbd "s-u") "vsplit")
(define-key *top-map* (kbd "s-o") "hsplit")
(define-key *top-map* (kbd "s-r") "remove")

(define-key *top-map* (kbd "s-RET") "run-shell-command exec termite")
(define-key *top-map* (kbd "s-d") "run-shell-command rofi -theme ~/src/base16-rofi/themes/base16-default-dark.rasi -show run")

(define-key *top-map* (kbd "s-f") "fullscreen")

(in-package :stumpwm)
(load "/home/notarock/src/slime/swank-loader.lisp")

(set-module-dir
 (pathname-as-directory (concat (getenv "HOME") "/src/stumpwm-contrib/util")))

(require :swank)
(swank-loader:init)
(swank:create-server :port 4004
                     :style swank:*communication-style*
                     :dont-close t)

(run-shell-command "polybar screen")
;; (run-shell-command "volumeicon")
;; (run-shell-command "xfce4-power-manager")
(run-shell-command "nm-applet")
(run-shell-command "blueman-applet")
(run-shell-command "feh --bg-fill /home/notarock/Pictures/wallpaper/selected*")
(run-shell-command "compton")

(run-shell-command "xset b off")

(load-module "swm-gaps")
;; (load-module "stumptray")
(load-module "end-session")
(load-module "ttf-fonts")

(setf swm-gaps:*outer-gaps-size* 0)
(setf swm-gaps:*inner-gaps-size* 10)

(swm-gaps:toggle-gaps)

;; turn on/off the mode line for the current head only.
;; (stumpwm:toggle-mode-line (stumpwm:current-screen)
;;                           (stumpwm:current-head))

;; (defun show-ip-address ()
;;   (let ((ip (run-shell-command "ifconfig wlp3s0 | grep 'inet ' | cut -d: -f2 | awk '{ print $2}'" t)))
;;     (substitute #\Space #\Newline ip)))

;; (defun show-battery-charge ()
;;   (let ((raw-battery (run-shell-command "acpi | cut -d, -f2" t)))
;;     (substitute #\Space #\Newline raw-battery)))

;; (defun show-hostname ()
;;   (let ((host-name (run-shell-command "cat /etc/hostname" t)))
;;     (substitute #\Space #\Newline host-name)))

;; (defun show-battery-state ()
;;   (let ((raw-battery (run-shell-command "acpi | cut -d: -f2 | cut -d, -f1" t)))
;;     (substitute #\Space #\Newline raw-battery)))

;; (defun show-kernel ()
;;   (let ((ip (run-shell-command "uname -r" t)))
;;     (substitute #\Space #\Newline ip)))


;; (set-module-dir
;;  (pathname-as-directory (concat (getenv "HOME") "/src/stumpwm-contrib/modeline")))

;; (load-module "disk")
;; (load-module "wifi")
;; (load-module "cpu")

;; (load-module "mem")
;; (load-module "battery-portable")

;; Set model-line format
;; Show time, cpu usage and network traffic in the modeline
;; (setf *separator* "^b^1≡")
;; (setf *screen-mode-line-format*
;;       (list
;;        "^b^3 [^B%n^b]"    ;; Group
;;        " " *separator*
;;        "^B^9 %W"           ;; Windows
;;        " " *separator*
;;        "^>"               ;; Other Side
;;        *separator*
;;        "^b^3 %c%t "      ;; CPU Info
;;        *separator*
;;        "^b^4 %M"
;;        *separator*
;;        "^b^6 %D"
;;        *separator*
;;        "^b^2 %I"
;;        " " *separator*
;;        "^b^3 %B "
;;        *separator*
;;        "^B^7 " '(:eval (run-shell-command "date '+%R, %F %a'|tr -d [:cntrl:] " t))
;;        " " *separator*
;;        "^b^88        "))


(update-color-map (current-screen))

;; (stumptray:stumptray)

(define-key *top-map* (kbd "s-1") "gselect 1")
(define-key *top-map* (kbd "s-2") "gselect 2")
(define-key *top-map* (kbd "s-3") "gselect 3")
(define-key *top-map* (kbd "s-4") "gselect 4")
(define-key *top-map* (kbd "s-5") "gselect 5")
(define-key *top-map* (kbd "s-9") "gselect 6")
(define-key *top-map* (kbd "s-0") "vgroups")

;; Quit menu
(define-key *top-map* (kbd "s-)") "end-session")


(defcommand backlight-up () ()
  "Up backlight by 20"
  (run-shell-command "xbacklight + 20"))

(defcommand backlight-down () ()
  "Up backlight by 20"
  (run-shell-command "xbacklight - 20"))

(defcommand volume-mute () ()
  "Mute / Unmute volume"
  (run-shell-command "amixer set Master toggle"))

(define-key *top-map* (kbd "XF86MonBrightnessUp") "backlight-up")
(define-key *top-map* (kbd "XF86MonBrightnessDown") "backlight-down")

(define-key *top-map* (kbd "XF86AudioMute") "volume-mute")



;; DEFAUT = 1
(gnewbg "EMACS") ;; 2
(gnewbg "TERM") ;; 3
(gnewbg "MISC") ;; 4
(gnewbg-float "FLOAT") ;; 5
(gnewbg "MAIL") ;; 5

(define-key *top-map* (kbd "s-m") "gmove")

(xft:cache-fonts)
(set-font (make-instance 'xft:font :family "Terminus (TTF)" :subfamily "Medium" :size 16))

;; Open mail client
(run-or-raise "mailspring" '(:class "Mailspring"))

(defun polybar-groups ()
  "Return string representation for polybar stumpgroups module"
  (apply #'concatenate 'string
         (mapcar
          (lambda (g)
            (let* ((name (string-upcase (group-name g)))
                   (n-win (write-to-string (length (group-windows g))))
                   (display-text (cond ((string-equal name "WEB") "   WEB ")
                                       ((string-equal name "EMACS") "   EMACS ")
                                       ((string-equal name "TERM") "   TERM ")
                                       ((string-equal name "MISC") "   MISC ")
                                       ((string-equal name "FLOAT") "   FLOAT ")
                                       ((string-equal name "MAIL") "  ✉ MAIL ")
                                       (t (concat "   " name "  ")))))
              (if (eq g (current-group))
                  (concat "%{F#ECEFF4 B#882E3440 u#8A9899 +u}" display-text "[" n-win "] " "%{F- B- u- -u}")
                  (concat "%{F#8A9899}" display-text "[" n-win "] " "%{F-}"))))

          (sort (screen-groups (current-screen)) #'< :key #'group-number))))

;;; config ends here

;; Update polybar group indicator
(add-hook *new-window-hook* (lambda (win) (run-shell-command "polybar-msg hook stumpwmgroups 1")))
(add-hook *destroy-window-hook* (lambda (win) (run-shell-command "polybar-msg hook stumpwmgroups 1")))
(add-hook *focus-group-hook* (lambda (win lastw) (run-shell-command "polybar-msg hook stumpwmgroups 1")))


