;; -*- mode: lisp; -*-

;; Copyright Â© 2018, 2018 Roch D'amour

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; Thansk to everyone who made their stumpwm config public.
;; Without you, this wouldn't be a thing :)

;;; Code:


;;; Mouse focus policy
(setf *mouse-focus-policy* :sloppy)

;;;; change the prefix key to something else
(set-prefix-key (kbd "s-c"))

;;;; Default terminal emulator
(setq *terminal* "urxvt")

(defcommand mailspring () ()
            "Run-or-Raise Mailspring"
            (run-or-raise "mailspring" '(:class "Mailspring")))

(defcommand firefox () ()
            "Run-or-Raise Firefox"
            (run-or-raise "firefox" '(:class "Firefox")))

(defcommand emacs () ()
            "Run-or-Raise Emacs"
            (run-or-raise "emacs " '(:class "Emacs")))

(define-key *root-map* (kbd "f")            "firefox")
(define-key *root-map* (kbd "C-f")            "firefox")
(define-key *root-map* (kbd "t")            "mailspring")
(define-key *root-map* (kbd "C-t")            "mailspring")



;; Frames
(loop for (vi-key name) in '(("k" "up")
                             ("j" "down")
                             ("h" "left")
                             ("l" "right"))
      do (let ((key-combo (format nil "s-~A" vi-key))
               (shifted-key-combo (format nil "s-~A" (string-upcase vi-key))))
           (define-key *top-map* (kbd key-combo)
                       (format nil "move-focus ~A" name))
           (define-key *top-map* (kbd shifted-key-combo)
                       (format nil "move-window ~A" name))))


;;;; Default Browser
(setq *browser* "firefox")

(setf *startup-message*
      "Get shit done.")

(setf *colors* (list "#272822"      ; 0 black
                     "#F92672"      ; 1 Red
                     "#A6E22E"      ; 2 Green
                     "#fd971f"      ; 3 Yellow
                     "#66D9EF"      ; 4 Blue
                     "#AE81FF"      ; 5 Magenta
                     "#A1EFE4"      ; 6 Cyan
                     "#ECEFF4"      ; 7 White
                     "#a59f84"      ; 8 Gray
                     "#262626"))    ; 9 bg

(setf
 *mode-line-background-color* (nth 9 *colors*))


(set-fg-color         (nth 7 *colors*))
(set-bg-color         (nth 0 *colors*))
(set-border-color     (nth 6 *colors*))
(set-focus-color      (nth 3 *colors* ))
(set-unfocus-color    (nth 4 *colors* ))


(setf
  *maxsize-border-width*           2
  *normal-border-width*            2
  *window-border-style*            :thin
  *transient-border-width*         2
)

(setf
  *message-window-gravity*         :center
  *timeout-wait*                   10
  *input-window-gravity*           :center
)


;;;; top-map splits
(define-key *top-map* (kbd "s-u") "vsplit")
(define-key *top-map* (kbd "s-o") "hsplit")
(define-key *top-map* (kbd "s-r") "remove")

(define-key *top-map* (kbd "s-RET") "run-shell-command exec urxvt")
(define-key *top-map* (kbd "s-d") "run-shell-command rofi -show run")
(define-key *top-map* (kbd "s-f") "fullscreen")

(in-package :stumpwm)
(load "/home/notarock/src/slime/swank-loader.lisp")

(require 'swank)
(swank-loader:init)
(swank:create-server :port 4004
                     :style swank:*communication-style*
                     :dont-close t)

(set-module-dir
 (pathname-as-directory (concat (getenv "HOME") "/src/stumpwm/stumpwm-contrib/util")))

(run-shell-command "volumeicon")
(run-shell-command "xfce4-power-manager")
(run-shell-command "nm-applet")
(run-shell-command "blueman-applet")
(run-shell-command "feh --bg-fill /home/notarock/Pictures/wallpaper/selected*")

(run-shell-command "xset b off")

(load-module "swm-gaps")
(load-module "stumptray")

(setf swm-gaps:*outer-gaps-size* 0)
(setf swm-gaps:*inner-gaps-size* 0)

(swm-gaps:toggle-gaps)

;; turn on/off the mode line for the current head only.
(stumpwm:toggle-mode-line (stumpwm:current-screen)
                          (stumpwm:current-head))

(defun show-ip-address ()
  (let ((ip (run-shell-command "ifconfig wlp3s0 | grep 'inet ' | cut -d: -f2 | awk '{ print $2}'" t)))
    (substitute #\Space #\Newline ip)))

(defun show-battery-charge ()
  (let ((raw-battery (run-shell-command "acpi | cut -d, -f2" t)))
    (substitute #\Space #\Newline raw-battery)))

(defun show-hostname ()
  (let ((host-name (run-shell-command "cat /etc/hostname" t)))
    (substitute #\Space #\Newline host-name)))

(defun show-battery-state ()
  (let ((raw-battery (run-shell-command "acpi | cut -d: -f2 | cut -d, -f1" t)))
    (substitute #\Space #\Newline raw-battery)))

(defun show-kernel ()
  (let ((ip (run-shell-command "uname -r" t)))
    (substitute #\Space #\Newline ip)))


;; Set model-line format
;; Show time, cpu usage and network traffic in the modeline
(setf *screen-mode-line-format*
      (list
       "^b^3  [^B%n^b]"
       "^b^1 >> "
       "^B^8%W"
       "^b^1 >> "
       "^>"
       "^b^1<<"
       '"^b^2 notarock^b^4@^b^2" '(:eval (show-hostname))
       "^b^1<<"
       "^b^3" '(:eval (show-battery-charge))
       "^b^1<<"
       "^b^7 " '(:eval (show-ip-address))
       "^b^1<<"
       "^B^7 " '(:eval (run-shell-command "date '+%R, %F %a'|tr -d [:cntrl:]" t))
       " ^b^1<< "
       "        "))

(update-color-map (current-screen))

(stumptray:stumptray)


(define-key *top-map* (kbd "s-1") "gselect 1")
(define-key *top-map* (kbd "s-2") "gselect 2")
(define-key *top-map* (kbd "s-3") "gselect 3")
(define-key *top-map* (kbd "s-4") "gselect 4")
(define-key *top-map* (kbd "s-4") "gselect 4")
(define-key *top-map* (kbd "s-5") "gselect 5")
(define-key *top-map* (kbd "s-6") "gselect 6")
(define-key *top-map* (kbd "s-7") "gselect 7")
(define-key *top-map* (kbd "s-8") "gselect 8")
(define-key *top-map* (kbd "s-9") "gselect 9")
(define-key *top-map* (kbd "s-0") "vgroups")


;; DEFAUT = 1
(gnewbg "emacs") ;; 2
(gnewbg "terms") ;; 3
(gnewbg "music") ;; 4
(gnewbg "misc") ;; 5
(gnewbg-float "float") ;; 6
(gnewbg "messenger") ;; 7
(gnewbg "social") ;; 8
(gnewbg "mail") ;; 9


(define-key *top-map* (kbd "s-m") "gmove")

;;; config ends here
lj
